<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GEN242 – Slides</title>
    <link>/slides/</link>
    <description>Recent content in Slides on GEN242</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/slides/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Slides: R on HPC Systems</title>
      <link>/slides/slides_10/r_for_hpc/r_for_hpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/slides/slides_10/r_for_hpc/r_for_hpc/</guid>
      <description>
        
        
        &lt;!---
- ioslides manual: 
   https://bookdown.org/yihui/rmarkdown/ioslides-presentation.html

- Compile from command-line
Rscript -e &#34;rmarkdown::render(&#39;R_for_HPC.Rmd&#39;); knitr::knit(&#39;R_for_HPC.Rmd&#39;, tangle=TRUE)&#34;
--&gt;
&lt;!---
  Note: following css chunks are required for scrolling support beyond slide boundaries
--&gt;
&lt;style&gt;
slides &gt; slide {
  overflow-x: auto !important;
  overflow-y: auto !important;
}
&lt;/style&gt;
&lt;style type=&#34;text/css&#34;&gt;
pre {
  max-height: 300px;
  overflow-y: auto;
}

pre[class] {
  max-height: 300px;
}
&lt;/style&gt;
&lt;style type=&#34;text/css&#34;&gt;
.scroll-300 {
  max-height: 300px;
  overflow-y: auto;
  background-color: inherit;
}
&lt;/style&gt;
&lt;h1 id=&#34;outline&#34;&gt;Outline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;white&#34;&gt;
&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neovim-based IDE for R&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parallel R with &lt;em&gt;batchtools&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;r-language&#34;&gt;R Language&lt;/h2&gt;
&lt;div class=&#34;columns-2&#34;&gt;
&lt;h3 id=&#34;about&#34;&gt;About&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Statistical environment and programming language (&lt;a href=&#34;https://cran.r-project.org/&#34;&gt;CRAN&lt;/a&gt;) widely used in academia and data science.&lt;/li&gt;
&lt;li&gt;Free and runs on all common operating systems&lt;/li&gt;
&lt;li&gt;Large ecosystem of extension packages, &lt;em&gt;e.g.&lt;/em&gt; &lt;a href=&#34;http://bioconductor.org&#34;&gt;Bioconductor&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/index.html&#34;&gt;CRAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;working-environments&#34;&gt;Working environments&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;R console and basic Rguis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rstudio.com/products/rstudio/features/%3CPaste%3E&#34;&gt;RStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jupyter Notebooks and JupyterHub&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hpcc.ucr.edu/manuals_linux-cluster_terminalIDE.html&#34;&gt;Nvim-R-tmux&lt;/a&gt;: Neovim-based IDE for R&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ess.r-project.org/&#34;&gt;Emacs Speaks Statistics (ESS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Many additional options: Rgedit, RKWard, Eclipse, Tinn-R, Notepad++, NppToR&lt;/li&gt;
&lt;/ul&gt;
&lt;img title=&#34;r environments&#34; src=&#34;images/rinterface.png&#34; style=&#34;width:500px;&#34;&gt;
&lt;/div&gt;
&lt;h2 id=&#34;rstudio-server-for-web-based-hpcc-access&#34;&gt;RStudio Server for Web-based HPCC Access&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Integrated development environment (IDE) for R. RStudio local GUI and RStudio Server is web-based.&lt;/li&gt;
&lt;li&gt;User access to RStudio Server on HPCC
&lt;ul&gt;
&lt;li&gt;The URL is: &lt;a href=&#34;https://rstudio.hpcc.ucr.edu&#34;&gt;https://rstudio.hpcc.ucr.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Username and password: same as for ssh access to HPCC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;columns-2&#34;&gt;
&lt;p&gt;Some useful RStudio shortcuts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl+Enter&lt;/code&gt;: send code to R console&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+Alt+Enter&lt;/code&gt;: send code to terminal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+Shift+C&lt;/code&gt;: comment/uncomment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+1/2&lt;/code&gt;: switch window focus&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./images/rstudio.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;nvim-r-tmux-terminal-based-r-environment&#34;&gt;Nvim-R-Tmux: Terminal-based R Environment&lt;/h2&gt;
&lt;p&gt;URLs: &lt;a href=&#34;https://github.com/jalvesaq/Nvim-R&#34;&gt;1. main page&lt;/a&gt;, &lt;a href=&#34;http://hpcc.ucr.edu/manuals_linux-cluster_terminalIDE.html&#34;&gt;2. HPCC manual&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/tgirke/7a7c197b443243937f68c422e5471899&#34;&gt;3. custom installs&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;
&lt;img title=&#34;Nvim-R-Tmux&#34; src=&#34;https://raw.githubusercontent.com/jalvesaq/Nvim-R/master/Nvim-R.gif&#34;&gt;
&lt;/center&gt;
&lt;p&gt;Animated screenshot of Nvim-R (from &lt;a href=&#34;https://github.com/jalvesaq/Nvim-R&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;advantages-of-command-line-ui&#34;&gt;Advantages of Command-line UI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Knowledge of command-line interface is essential for working on a computer cluster efficiently&lt;/li&gt;
&lt;li&gt;Main advantage: language agnostic approach that works with most computer languages&lt;/li&gt;
&lt;li&gt;Users of Emacs may want to consider using ESS instead&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;outline-1&#34;&gt;Outline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Background&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;white&#34;&gt;
&lt;p&gt;&lt;strong&gt;Neovim-based IDE for R&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parallel R with &lt;em&gt;batchtools&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction-to-nvim-r-tmux&#34;&gt;Introduction to Nvim-R-Tmux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The following introduces Nvim-R combined with Tmux.&lt;/li&gt;
&lt;li&gt;Similar instructions are available in HPCC’s Nvim-R-Tmux tutorial &lt;a href=&#34;http://hpcc.ucr.edu/manuals_linux-cluster_terminalIDE.html&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Note: Nvim-R and Tmux are two independent tools that can be used independently or in combination, and both are useful for remote terminal work.&lt;/li&gt;
&lt;li&gt;For simplicity, some of the following examples use Nvim-R without Tmux. Once users know the basics of both then it is trivial to combine them as needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vimnvim-basics&#34;&gt;Vim/Nvim Basics&lt;/h2&gt;
&lt;p&gt;The following opens a file (here &lt;code&gt;myfile.txt&lt;/code&gt;) with nvim (or vim). This can be a new file or an existing one.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvim myfile.txt # for neovim (or &#39;vim myfile.txt&#39; for vim)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;modes&#34;&gt;Modes&lt;/h3&gt;
&lt;p&gt;In Vim/Nvim there are three main modes: &lt;strong&gt;normal&lt;/strong&gt;, &lt;strong&gt;insert&lt;/strong&gt; and &lt;strong&gt;command&lt;/strong&gt; mode. The most important commands for switching between the three modes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;: switches from the normal to the insert mode. The latter is used for typing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Esc&lt;/code&gt;: switches from the insert mode back to the normal mode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt;: starts the command mode (from normal mode) at the bottom of the terminal window.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The cursor is moved with the arrow keys. In Nvim one can also enable mouse-based movements of the cursor. &lt;code&gt;Fn Up/Down&lt;/code&gt; allows to page. In the following, all
commands starting with &lt;code&gt;:&lt;/code&gt; need to be typed in the command mode. All other commands are typed in the normal mode after pushing the &lt;code&gt;Esc&lt;/code&gt; key.&lt;/p&gt;
&lt;p style=&#34;text-align: right;&#34;&gt;
**\[ Scroll down to continue \]**
&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&#34;important-modifier-keys-to-control-vimnvim&#34;&gt;Important modifier keys to control Vim/Nvim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:w&lt;/code&gt;: saves changes to file. If in editing mode, &lt;code&gt;Esc&lt;/code&gt; needs to be pressed first.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q&lt;/code&gt;: quits file that has not been changed; use &lt;code&gt;q!&lt;/code&gt; to quit file without saving changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wq&lt;/code&gt;: saves and quits file&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;useful-resources-for-learning-vimnvim&#34;&gt;Useful resources for learning Vim/Nvim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openvim.com&#34;&gt;Interactive Vim Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vimdoc.sourceforge.net/&#34;&gt;Official Vim Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hpcc.ucr.edu/manuals_linux-basics_vim.html&#34;&gt;HPCC Linux Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tmux-for-managing-terminal-sessions&#34;&gt;Tmux for Managing Terminal Sessions&lt;/h2&gt;
&lt;h3 id=&#34;what-is-tmux&#34;&gt;What is Tmux?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tmux is a virtual terminal multiplexer providing re-attachable terminal sessions&lt;/li&gt;
&lt;li&gt;Advantage: work in a terminal session cannot get lost due to internet disruptions or even when switching computers&lt;/li&gt;
&lt;li&gt;Combined with the &lt;code&gt;Nvim-r&lt;/code&gt; plugin it provides a flexible working environment for R&lt;/li&gt;
&lt;li&gt;Users can send code from a script to the R console or command-line.&lt;/li&gt;
&lt;li&gt;On HPCC both Nvim-R and Tmux are pre-configured and easy to install&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;img title=&#34;Nvim-R&#34; src=&#34;https://raw.githubusercontent.com/jalvesaq/Nvim-R/master/Nvim-R.gif&#34; style=&#34;width:400px;&#34;&gt;
&lt;/center&gt;
&lt;p&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h2 id=&#34;nvim-r-tmux-configuration-in-hpcc-user-accounts&#34;&gt;Nvim-R-Tmux Configuration in HPCC User Accounts&lt;/h2&gt;
&lt;p&gt;Skip these steps if Nvim-R-Tmux is already configured in your account. Or follow the &lt;a href=&#34;https://gist.github.com/tgirke/7a7c197b443243937f68c422e5471899&#34;&gt;detailed
instructions&lt;/a&gt; to install Nvim-R-Tmux from scratch on your own system (&lt;em&gt;e.g.&lt;/em&gt; laptop or computer).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Log in to your user account on HPCC and execute on the command-line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;install_nvimRtmux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; To enable the nvim-R-tmux environment, log out and in again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Follow usage instructions of next section.&lt;/p&gt;
&lt;h2 id=&#34;typical-usage-workflow-for-nvim-r-tmux&#34;&gt;Typical Usage Workflow for Nvim-R-Tmux&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. Start tmux session from login node (not compute node!)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running Nvim from tmux provides reattachment functionality. Skip this step if this is not required.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tmux # starts a new tmux session 
tmux a # attaches to an existing session 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Open nvim-connected R session&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Open a &lt;code&gt;*.R&lt;/code&gt; or &lt;code&gt;*.Rmd&lt;/code&gt; file with &lt;code&gt;nvim&lt;/code&gt; and initialize a connected R session
with &lt;code&gt;\rf&lt;/code&gt;. Note, the resulting split window among Nvim and R behaves like a split
viewport in &lt;code&gt;nvim&lt;/code&gt; or &lt;code&gt;vim&lt;/code&gt; meaning the usage of &lt;code&gt;Ctrl-w w&lt;/code&gt; followed by &lt;code&gt;i&lt;/code&gt; and
&lt;code&gt;Esc&lt;/code&gt; is important for session navigation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvim myscript.R # or *.Rmd file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. Send R code from nvim to the R pane&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Single lines of code can be sent from nvim to the R console by pressing the space bar. To send
several lines at once, one can select them in nvim’s visual mode and then hit the space bar.&lt;/p&gt;
&lt;p style=&#34;text-align: right;&#34;&gt;
**\[ Scroll down to continue \]**
&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Please note, the default command for sending code lines in the nvim-r-plugin is &lt;code&gt;\l&lt;/code&gt;. This key
binding has been remapped in the provided &lt;code&gt;.config/nvim/init.vim&lt;/code&gt; file to the
space bar. Most other key bindings (shortcuts) still start with the &lt;code&gt;\&lt;/code&gt; as
LocalLeader, &lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;\rh&lt;/code&gt; opens the help for a function/object where the cursor
is located in nvim. More details on this are given on the next slide(s).&lt;/li&gt;
&lt;li&gt;The most comprehensive manual on this is the official &lt;code&gt;Nvim-R&lt;/code&gt; documentation &lt;a href=&#34;https://github.com/jalvesaq/Nvim-R/blob/master/doc/Nvim-R.txt&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;keybindings-to-control-environment&#34;&gt;Keybindings to Control Environment&lt;/h2&gt;
&lt;h3 id=&#34;important-keybindings-for-nvim&#34;&gt;Important keybindings for nvim&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\rf&lt;/code&gt;: opens vim-connected R session. If you do this the first time in your user account, you might be asked to create an &lt;code&gt;R&lt;/code&gt; directory under &lt;code&gt;~/&lt;/code&gt;. If so approve this action by pressing &lt;code&gt;y&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spacebar&lt;/code&gt;: sends code from vim to R; here remapped in &lt;code&gt;init.vim&lt;/code&gt; from default &lt;code&gt;\l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:split&lt;/code&gt; or &lt;code&gt;:vsplit&lt;/code&gt;: splits viewport (similar to pane split in tmux)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gz&lt;/code&gt;: maximizes size of viewport in normal mode (similar to Tmux’s &lt;code&gt;Ctrl-a z&lt;/code&gt; zoom utility)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-w w&lt;/code&gt;: jumps cursor to R viewport and back; toggle between insert (&lt;code&gt;i&lt;/code&gt;) and command (&lt;code&gt;Esc&lt;/code&gt;) mode is required for navigation and controlling the environment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-w r&lt;/code&gt;: swaps viewports&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-w =&lt;/code&gt;: resizes splits to equal size&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:resize &amp;lt;+5 or -5&amp;gt;&lt;/code&gt;: resizes height by specified value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p style=&#34;text-align: right;&#34;&gt;
**\[ Scroll down to continue \]**
&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:vertical resize &amp;lt;+5 or -5&amp;gt;&lt;/code&gt;: resizes width by specified value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-w H&lt;/code&gt; or &lt;code&gt;Ctrl-w K&lt;/code&gt;: toggles between horizontal/vertical splits&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-spacebar&lt;/code&gt;: omni completion for R objects/functions when nvim is in insert mode. Note, this has been remapped in &lt;code&gt;init.vim&lt;/code&gt; from difficult to type default &lt;code&gt;Ctrl-x Ctrl-o&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:h nvim-R&lt;/code&gt;: opens nvim-R’s user manual; navigation works the same as for any Vim/Nvim help document&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:Rhelp fct_name&lt;/code&gt;: opens help for a function from nvim’s command mode with text completion support&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-s and Ctrl-x&lt;/code&gt;: freezes/unfreezes vim (some systems)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;important-keybindings-for-tmux&#34;&gt;Important keybindings for tmux&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pane-level commands&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a %&lt;/code&gt;: splits pane vertically&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a &amp;quot;&lt;/code&gt;: splits pane horizontally&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a o&lt;/code&gt;: jumps cursor to next pane&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a Ctrl-o&lt;/code&gt;: swaps panes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a &amp;lt;space bar&amp;gt;&lt;/code&gt;: rotates pane arrangement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a Alt &amp;lt;left or right&amp;gt;&lt;/code&gt;: resizes to left or right&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a Esc &amp;lt;up or down&amp;gt;&lt;/code&gt;: resizes to left or right&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Window-level comands&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a n&lt;/code&gt;: switches to next tmux window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a Ctrl-a&lt;/code&gt;: switches to previous tmux window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a c&lt;/code&gt;: creates a new tmux window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a 1&lt;/code&gt;: switches to specific tmux window selected by number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Session-level comands&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a d&lt;/code&gt;: detaches from current session&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a s&lt;/code&gt;: switch between available tmux sessions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ tmux new -s &amp;lt;name&amp;gt;&lt;/code&gt;: starts new session with a specific name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ tmux ls&lt;/code&gt;: lists available tmux session(s)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ tmux attach -t &amp;lt;id&amp;gt;&lt;/code&gt;: attaches to specific tmux session&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ tmux attach&lt;/code&gt;: reattaches to session&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ tmux kill-session -t &amp;lt;id&amp;gt;&lt;/code&gt;: kills a specific tmux session&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-a : kill-session&lt;/code&gt;: kills a session from tmux command mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;use-same-environment-for-other-languages&#34;&gt;Use Same Environment for Other Languages&lt;/h2&gt;
&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;p&gt;For languages other than R one can use the
&lt;a href=&#34;https://github.com/jalvesaq/vimcmdline&#34;&gt;vimcmdline&lt;/a&gt; plugin for nvim (or vim).
Supported languages include Bash, Python, Golang, Haskell, JavaScript, Julia,
Jupyter, Lisp, Macaulay2, Matlab, Prolog, Ruby, and Sage. The nvim terminal
also colorizes the output, as in the screenshot below, where different colors
are used for general output, positive and negative numbers, and the prompt
line.&lt;/p&gt;
&lt;center&gt;
&lt;img title=&#34;vimcmdline&#34; src=&#34;https://cloud.githubusercontent.com/assets/891655/7090493/5fba2426-df71-11e4-8eb8-f17668d9361a.png&#34; &gt;
&lt;/center&gt;
&lt;center&gt;
vimcmdline
&lt;/center&gt;
&lt;h3 id=&#34;install&#34;&gt;Install&lt;/h3&gt;
&lt;p&gt;To install it, one needs to copy from the &lt;code&gt;vimcmdline&lt;/code&gt; repository the directories
&lt;code&gt;ftplugin&lt;/code&gt;, &lt;code&gt;plugin&lt;/code&gt; and &lt;code&gt;syntax&lt;/code&gt; and their files to &lt;code&gt;~/.config/nvim/&lt;/code&gt;. For
user accounts of UCR’s HPCC, the above install script &lt;code&gt;install_nvimRtmux&lt;/code&gt; includes the
install of &lt;code&gt;vimcmdline&lt;/code&gt; (since 09-Jun-18).&lt;/p&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;p&gt;The usage of &lt;code&gt;vimcmdline&lt;/code&gt; is very similar to &lt;code&gt;nvim-R&lt;/code&gt;. To start a connected terminal session, one
opens with nvim a code file with the extension of a given language (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;*.sh&lt;/code&gt; for Bash or &lt;code&gt;*.py&lt;/code&gt; for Python),
while the corresponding interactive interpreter session is initiated
by pressing the key sequence &lt;code&gt;\s&lt;/code&gt; (corresponds to &lt;code&gt;\rf&lt;/code&gt; under &lt;code&gt;nvim-R&lt;/code&gt;). Subsequently, code lines can be sent
with the space bar. More details are available &lt;a href=&#34;https://github.com/jalvesaq/vimcmdline&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;nvim-r-demo&#34;&gt;Nvim-R Demo&lt;/h2&gt;
&lt;p&gt;To try out the following instructions, users want to log into their HPCC
account via &lt;code&gt;ssh&lt;/code&gt;, and then preferentially connect to a node by initializing an
interactive &lt;code&gt;srun&lt;/code&gt; session. The latter mimics the best practices for a real workflow
but is not necessary for this basic exercise.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;srun --x11 --partition=short --mem=2gb --cpus-per-task 4 --ntasks 1 --time 1:00:00 --pty bash -l
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Under &lt;code&gt;--partition&lt;/code&gt; it is important to assign the name of a partition a user has access to
&lt;ul&gt;
&lt;li&gt;Most users have access to: &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;batch&lt;/code&gt;, &lt;code&gt;intel&lt;/code&gt; and &lt;code&gt;highmem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Students registered under the statistics department, only have access to: &lt;code&gt;statsdept&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Users of labs owning computer nodes also can access: &lt;code&gt;&amp;lt;pi_name&amp;gt;lab&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For more details on argument settings for &lt;code&gt;srun&lt;/code&gt;, see &lt;a href=&#34;http://hpcc.ucr.edu/manuals_linux-cluster_jobs.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Download &lt;code&gt;R_for_HPC_demo.R&lt;/code&gt; file to you HPCC account as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://raw.githubusercontent.com/ucr-hpcc/ucr-hpcc.github.io/master/presentations/2020-12-18_Workshop/R_for_HPC/demo_files/R_for_HPC_demo.R
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;text-align: right;&#34;&gt;
**\[ Scroll down to continue \]**
&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;nvim_demo.R&lt;/code&gt; with nvim. The content of this file is shown in the following code
block. Next, initialize a Nvim-connected R session with &lt;code&gt;\rf&lt;/code&gt;, and then execute the
code by pressing the space bar on your keyboard.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)                                                                                                                                                            
write_tsv(iris, &amp;quot;iris.txt&amp;quot;) # Creates sample file                                                                                                                             
read_tsv(&amp;quot;iris.txt&amp;quot;) %&amp;gt;% # Import with read_tbv from readr package                                                                                                            
    as_tibble() %&amp;gt;%                                                                                                                                                           
    group_by(Species) %&amp;gt;%                                                                                                                                                     
    summarize_all(mean) %&amp;gt;%                                                                                                                                                   
    reshape2::melt(id.vars=c(&amp;quot;Species&amp;quot;), variable.name = &amp;quot;Samples&amp;quot;, value.name=&amp;quot;Values&amp;quot;) %&amp;gt;%                                                                                  
    ggplot(aes(Samples, Values, fill = Species)) +                                                                                                                            
    geom_bar(position=&amp;quot;dodge&amp;quot;, stat=&amp;quot;identity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&#34;text-align: right;&#34;&gt;
**\[ Scroll down to continue \]**
&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;If X11 is enabled in a user session then the above code will generate the following bar plot in a separate graphics window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../en/slides/slides_10/R_for_HPC/R_for_HPC_files/figure-html/nvim-r-tmux-demo_run-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;selecting-r-versions-on-hpcc&#34;&gt;Selecting R Versions on HPCC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Like many other software tools, R versions are managed under HPCC’s module system.&lt;/li&gt;
&lt;li&gt;To use a specific R version in Nvim-R, one simply loads it prior to starting Nvim. Instructions
for enabling additional R version toggle options are provided &lt;a href=&#34;https://gist.github.com/tgirke/7a7c197b443243937f68c422e5471899#rversion_toggle&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which R versions are available can be listed with the following command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;module avail R
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The version labeled &lt;code&gt;default&lt;/code&gt; is used by default. A specific R version can be loaded as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;module load R/4.0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check which modules (including R) are loaded in a user’s environment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;module list
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;outline-2&#34;&gt;Outline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Background&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neovim-based IDE for R&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;white&#34;&gt;
&lt;p&gt;**Parallel R with &lt;em&gt;batchtools&lt;/em&gt; **&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;parallel-evaluations-in-r&#34;&gt;Parallel Evaluations in R&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;R provides a large number of packages for parallel evaluations on multi-core, multi-socket and multi-node systems. The latter are usually referred to as computer clusters.&lt;/li&gt;
&lt;li&gt;MPI is also supported&lt;/li&gt;
&lt;li&gt;For an overview of parallelization packages available for R see &lt;a href=&#34;https://cran.r-project.org/web/views/HighPerformanceComputing.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;One of the most comprehensive parallel computing environments for R is
&lt;a href=&#34;https://mllg.github.io/batchtools/articles/batchtools.html#migration&#34;&gt;&lt;code&gt;batchtools&lt;/code&gt;&lt;/a&gt;. Older versions of this package were released under the name &lt;code&gt;BatchJobs&lt;/code&gt; (Bischl et al. 2015).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;batchtools&lt;/code&gt; supports both multi-core and multi-node computations with and without schedulers. By making use of
cluster template files, most schedulers and queueing systems are supported (&lt;em&gt;e.g.&lt;/em&gt; Torque, Sun Grid Engine, Slurm).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reminder-traditional-job-submission-for-r&#34;&gt;Reminder: Traditional Job Submission for R&lt;/h2&gt;
&lt;p&gt;This topic is covered in more detail in other tutorials. The following only provides a very brief overview of this submission method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Create Slurm submission script, here called &lt;code&gt;script_name.sh&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash -l
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=1G
#SBATCH --time=1-00:15:00 # 1 day and 15 minutes
#SBATCH --mail-user=useremail@address.com
#SBATCH --mail-type=ALL
#SBATCH --job-name=&amp;quot;some_test&amp;quot;
#SBATCH -p short # Choose queue/partition from: intel, batch, highmem, gpu, short

Rscript my_script.R
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Submit R script (&lt;code&gt;my_script.R&lt;/code&gt;) called by above Slurm script with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbatch script_name.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;parallel-evaluations-on-clusters-with-batchtools&#34;&gt;Parallel Evaluations on Clusters with &lt;code&gt;batchtools&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The following introduces the usage of &lt;code&gt;batchtools&lt;/code&gt; for a computer cluster
using SLURM as scheduler (workload manager). SLURM is the scheduler used by
the HPCC.&lt;/li&gt;
&lt;li&gt;Similar instructions are provided in HPCC’s manual section covering
&lt;code&gt;batchtools&lt;/code&gt;
&lt;a href=&#34;https://hpcc.ucr.edu/manuals_linux-cluster_parallelR.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;To simplify the evaluation of the R code on the following slides, the
corresponding text version is available for download from
&lt;a href=&#34;https://raw.githubusercontent.com/ucr-hpcc/ucr-hpcc.github.io/master/presentations/2020-12-18_Workshop/R_for_HPC/demo_files/R_for_HPC_demo.R&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hands-on-demo-of-batchtools&#34;&gt;Hands-on Demo of &lt;code&gt;batchtools&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;set-up-working-directory-for-slurm&#34;&gt;Set up working directory for SLURM&lt;/h3&gt;
&lt;p&gt;First login to your cluster account, open R and execute the following lines. This will
create a test directory (here &lt;code&gt;mytestdir&lt;/code&gt;), redirect R into this directory and then download
the required files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ucr-hpcc/ucr-hpcc.github.io/blob/master/presentations/2020-12-18_Workshop/R_for_HPC/demo_files/slurm.tmpl&#34;&gt;&lt;code&gt;slurm.tmpl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ucr-hpcc/ucr-hpcc.github.io/blob/master/presentations/2020-12-18_Workshop/R_for_HPC/demo_files/.batchtools.conf.R&#34;&gt;&lt;code&gt;.batchtools.conf.R&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dir.create(&amp;quot;mytestdir&amp;quot;)
setwd(&amp;quot;mytestdir&amp;quot;)
download.file(&amp;quot;https://bit.ly/3gZJBsy&amp;quot;, &amp;quot;slurm.tmpl&amp;quot;)
download.file(&amp;quot;https://bit.ly/3nvSNHA&amp;quot;, &amp;quot;.batchtools.conf.R&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;load-package-and-define-some-custom-function&#34;&gt;Load package and define some custom function&lt;/h3&gt;
&lt;p&gt;The following code defines a test function (here &lt;code&gt;myFct&lt;/code&gt;) that will be run on the cluster for demonstration
purposes.&lt;/p&gt;
&lt;p style=&#34;text-align: right;&#34;&gt;
**\[ Scroll down to continue \]**
&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;The test function (&lt;code&gt;myFct&lt;/code&gt;) subsets the &lt;code&gt;iris&lt;/code&gt; data frame by rows, and appends the host name and R version of each
node where the function was executed. The R version to be used on each node can be
specified in the &lt;code&gt;slurm.tmpl&lt;/code&gt; file (under &lt;code&gt;module load&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;RenvModule&#39;)
module(&#39;load&#39;,&#39;slurm&#39;) # Loads slurm among other modules

library(batchtools)
myFct &amp;lt;- function(x) {
    Sys.sleep(10) # to see job in queue, pause for 10 sec
    result &amp;lt;- cbind(iris[x, 1:4,],
        Node=system(&amp;quot;hostname&amp;quot;, intern=TRUE),
        Rversion=paste(R.Version()[6:7], collapse=&amp;quot;.&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;submit-jobs-from-r-to-cluster&#34;&gt;Submit jobs from R to cluster&lt;/h3&gt;
&lt;p&gt;The following creates a &lt;code&gt;batchtools&lt;/code&gt; registry, defines the number of jobs and resource requests, and then submits the jobs to the cluster
via SLURM.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;reg &amp;lt;- makeRegistry(file.dir=&amp;quot;myregdir&amp;quot;, conf.file=&amp;quot;.batchtools.conf.R&amp;quot;)
Njobs &amp;lt;- 1:4 # Define number of jobs (here 4)
ids &amp;lt;- batchMap(fun=myFct, x=Njobs) 
done &amp;lt;- submitJobs(ids, reg=reg, resources=list(partition=&amp;quot;short&amp;quot;, walltime=120, ntasks=1, ncpus=1, memory=1024))
waitForJobs() # Wait until jobs are completed
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;summarize-job-status&#34;&gt;Summarize job status&lt;/h3&gt;
&lt;p&gt;After the jobs are completed one can inspect their status as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;getStatus() # Summarize job status
showLog(Njobs[1])
# killJobs(Njobs) # # Possible from within R or outside with scancel
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;accessassemble-results&#34;&gt;Access/assemble results&lt;/h3&gt;
&lt;p&gt;The results are stored as &lt;code&gt;.rds&lt;/code&gt; files in the registry directory (here &lt;code&gt;myregdir&lt;/code&gt;). One
can access them manually via &lt;code&gt;readRDS&lt;/code&gt; or use various convenience utilities provided
by the &lt;code&gt;batchtools&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;readRDS(&amp;quot;myregdir/results/1.rds&amp;quot;) # reads from rds file first result chunk
loadResult(1) 
lapply(Njobs, loadResult)
reduceResults(rbind) # Assemble result chunks in single data.frame
do.call(&amp;quot;rbind&amp;quot;, lapply(Njobs, loadResult))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;remove-registry-directory-from-file-system&#34;&gt;Remove registry directory from file system&lt;/h3&gt;
&lt;p&gt;By default existing registries will not be overwritten. If required one can explicitly
clean and delete them with the following functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clearRegistry() # Clear registry in R session
removeRegistry(wait=0, reg=reg) # Delete registry directory
# unlink(&amp;quot;myregdir&amp;quot;, recursive=TRUE) # Same as previous line
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;load-registry-into-r&#34;&gt;Load registry into R&lt;/h3&gt;
&lt;p&gt;Loading a registry can be useful when accessing the results at a later state or
after moving them to a local system.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;from_file &amp;lt;- loadRegistry(&amp;quot;myregdir&amp;quot;, conf.file=&amp;quot;.batchtools.conf.R&amp;quot;)
reduceResults(rbind)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;h3 id=&#34;nvim-r-tmux&#34;&gt;Nvim-R-Tmux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Steeper learning curve than GUI-based IDEs, including RStudio or Jupyter Notebooks&lt;/li&gt;
&lt;li&gt;However, it is much more
&lt;ul&gt;
&lt;li&gt;powerful, flexible, robust and language agnostic solution for working on remote systems&lt;/li&gt;
&lt;li&gt;time learning it is well invested, especially for students and researchers with complex data analysis and programming needs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;advantages-of-batchtools&#34;&gt;Advantages of &lt;code&gt;batchtools&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;many parallelization methods multiple cores, and across both multiple CPU sockets and nodes&lt;/li&gt;
&lt;li&gt;most schedulers supported&lt;/li&gt;
&lt;li&gt;takes full advantage of a cluster&lt;/li&gt;
&lt;li&gt;robust job management by organizing results in registry file-based database&lt;/li&gt;
&lt;li&gt;simplifies submission, monitoring and restart of jobs&lt;/li&gt;
&lt;li&gt;well supported and maintained package&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;outline-3&#34;&gt;Outline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Background&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neovim-based IDE for R&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parallel R with _batchtools&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;white&#34;&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34;&gt;
&lt;div id=&#34;ref-Bischl2015-rf&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;Bischl, Bernd, Michel Lang, Olaf Mersmann, Jörg Rahnenführer, and Claus Weihs. 2015. “&lt;span class=&#34;nocase&#34;&gt;BatchJobs and BatchExperiments: Abstraction Mechanisms for Using R in Batch Environments&lt;/span&gt;.” &lt;em&gt;Journal of Statistical Software&lt;/em&gt;. &lt;a href=&#34;http://www.jstatsoft.org/v64/i11/&#34;&gt;http://www.jstatsoft.org/v64/i11/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
